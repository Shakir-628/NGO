@model NGO_Project.InventoryDashboardViewModel

@{
    Layout = "~/Views/Shared/_LayoutNGO.cshtml";
}

<style>
    /* ... Your CSS styles go here ... */
    .btn-primary {
        background: #111827;
        color: #fff;
        border: none;
        border-radius: 8px;
        padding: 10px 22px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: background-color 0.2s;
    }

        .btn-primary:hover {
            background: #1f2937;
        }

    .summary-card {
        background: #fff;
        border-radius: 12px;
        padding: 22px 28px;
        border: 1.5px solid #e5e7eb;
        min-width: 220px;
    }

    .form-section {
        background: #fff;
        border-radius: 10px;
        border: 1.5px solid #e5e7eb;
        padding: 24px;
        margin-bottom: 28px;
    }

    /* Styles for form alignment */
    .form-fields-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
        gap: 18px;
        margin-bottom: 20px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

        .form-group label {
            font-weight: 500;
            margin-bottom: 6px;
            color: #4b5563;
        }

    .form-control {
        padding: 10px;
        border: 1.5px solid #d1d5db;
        border-radius: 6px;
        font-size: 1rem;
        transition: border-color 0.2s;
    }

        .form-control:focus {
            outline: none;
            border-color: #3b82f6;
        }

    .text-danger {
        font-size: 0.875rem;
        color: #ef4444;
        margin-top: 4px;
    }

    /* Updated button styles */
    .btn {
        padding: 10px 22px;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.2s, color 0.2s;
    }

    .btn-success {
        background: #22c55e;
        color: #fff;
        border: none;
    }

        .btn-success:hover {
            background: #16a34a;
        }

    .btn-cancel {
        background: #e5e7eb;
        color: #374151;
        border: none;
    }

        .btn-cancel:hover {
            background: #d1d5db;
        }

    .d-grid {
        display: flex;
        gap: 12px;
        margin-top: 20px;
    }

    /* Table styles */
    .table-container {
        overflow-x: auto;
    }

    .inventory-table {
        width: 100%;
        border-collapse: collapse;
        min-width: 600px;
    }

        .inventory-table th,
        .inventory-table td {
            padding: 12px 16px;
            text-align: left;
            border-bottom: 1.5px solid #e5e7eb;
        }

    .status.available {
        color: green;
    }

    .status.low-stock {
        color: orange;
    }

    .status.out-of-stock {
        color: red;
    }
</style>

<div class="tab-content">
    <div style="display: flex; justify-content: flex-end; margin-bottom: 18px;">
        <button id="showAddItemFormBtn" class="btn-primary">
            <span style="font-size:1.1rem;"></span> Add Item
        </button>
    </div>

    <div style="font-size: 2rem; font-weight: 700; margin-bottom: 18px; color: #111827;">Inventory Management</div>

    <div style="display: flex; gap: 18px; margin-bottom: 24px; flex-wrap: wrap;">
        <div class="summary-card">
            <div style="color: #374151; font-weight: 600;">Total Items</div>
            <div id="totalItems" style="font-size: 2rem; font-weight: 700; color: #1d4ed8;">@Model.InventoryItems.Count()</div>
        </div>
        <div class="summary-card">
            <div style="color: #374151; font-weight: 600;">Available</div>
            <div id="availableItems" style="font-size: 2rem; font-weight: 700; color: #1d4ed8;">@Model.InventoryItems.Count(i => i.Quantity > 5)</div>
        </div>
        <div class="summary-card">
            <div style="color: #374151; font-weight: 600;">Low Stock </div>
            <div id="lowStockItems" style="font-size: 2rem; font-weight: 700; color: #1d4ed8;">@Model.InventoryItems.Count(i => i.Quantity <= 5 && i.Quantity > 0)</div>
        </div>
    </div>

    <div id="addItemFormContainer" class="form-section" style="display: none;">
        <div style="font-size: 1.25rem; font-weight: 700;">Add New Inventory Item</div>
        <div style="color: #6b7280; font-size: 1.05rem; margin-bottom: 18px;">Record new donations received</div>

        @using (Html.BeginForm("Create", "InventoryItems", FormMethod.Post, new { id = "addItemForm" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-fields-grid">
                <div class="form-group">
                    <label>Item Name</label>
                    @Html.TextBoxFor(m => m.NewItem.ItemName, new { @class = "form-control", placeholder = "Enter item name", required = "required" })
                    @Html.ValidationMessageFor(m => m.NewItem.ItemName, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    <label>Category</label>
                    @Html.TextBoxFor(m => m.NewItem.Category, new { @class = "form-control", placeholder = "e.g., Food, Clothes", required = "required" })
                    @Html.ValidationMessageFor(m => m.NewItem.Category, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    <label>Quantity</label>
                    @Html.TextBoxFor(m => m.NewItem.Quantity, new { @class = "form-control", placeholder = "e.g., 50", type = "number", required = "required", min = "1" })
                    @Html.ValidationMessageFor(m => m.NewItem.Quantity, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    <label>Unit</label>
                    @Html.TextBoxFor(m => m.NewItem.Unit, new { @class = "form-control", placeholder = "e.g., bags, boxes", required = "required" })
                    @Html.ValidationMessageFor(m => m.NewItem.Unit, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    <label>Expiry Date (if applicable)</label>
                    @Html.TextBoxFor(m => m.NewItem.ExpirationDate, "{0:yyyy-MM-dd}", new { @type = "date", @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.NewItem.ExpirationDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="d-grid">
                <button type="submit" class="btn btn-success">Add Item</button>
                <button type="button" id="cancelAddItemFormBtn" class="btn btn-cancel">Cancel</button>
            </div>
        }
    </div>

    <div style="background: #fff; border-radius: 10px; border: 1.5px solid #e5e7eb; padding: 24px;">
        <div style="font-size: 1.25rem; font-weight: 700;">Current Inventory</div>
        <div style="color: #6b7280; font-size: 1.05rem; margin-bottom: 18px;">Track and manage your donation inventory</div>

        <div class="table-container">
            <table class="inventory-table">
                <thead>
                    <tr>
                        <th>Item Name</th>
                        <th>Category</th>
                        <th>Quantity</th>
                        <th>Unit</th>
                        <th>Status</th>
                        <th>Received Date</th>
                    </tr>
                </thead>
                <tbody id="inventoryTableBody">
                    @Html.Partial("_InventoryTableRows", Model.InventoryItems)
                </tbody>
            </table>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
    <script>
        $(document).ready(function () {
            // Event listener to show the form
            $("#showAddItemFormBtn").on("click", function () {
                $("#addItemFormContainer").show();
            });

            // Event listener to hide the form
            $("#cancelAddItemFormBtn").on("click", function () {
                $("#addItemFormContainer").hide();
                $("#addItemForm")[0].reset();
            });

            // AJAX form submission
            $("#addItemForm").on("submit", function (e) {
                e.preventDefault(); // Prevent the default form submission

                var form = $(this);
                var url = form.attr("action");
                var formData = form.serialize();

                $.ajax({
                    type: "POST",
                    url: url,
                    data: formData,
                    success: function (response) {
                        if (response.success) {
                            // On success, hide the form and refresh the table content
                            $("#addItemFormContainer").hide();
                            $("#addItemForm")[0].reset();

                            // Use SweetAlert for a success message
                            swal("Success!", "Item added successfully.", "success");

                            // Call the controller action to get the updated list of items
                            $.get("/InventoryItems/GetInventoryItems", function (data) {
                                $("#inventoryTableBody").html(data);
                            });

                            // Call the controller action to get the updated summary data
                            $.get("/InventoryItems/GetSummaryData", function (data) {
                                $("#totalItems").text(data.total);
                                $("#availableItems").text(data.available);
                                $("#lowStockItems").text(data.lowStock);
                            });

                        } else {
                            // Use SweetAlert for an error message
                            swal("Error!", "An error occurred: " + response.errors, "error");
                        }
                    },
                    error: function (xhr, status, error) {
                        // Use SweetAlert for a server-side error message
                        swal("Error!", "An error occurred while adding the item.", "error");
                        console.error(xhr.responseText);
                    }
                });
            });
        });
    </script>
}