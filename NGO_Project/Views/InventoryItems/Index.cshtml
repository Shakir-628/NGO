@model NGO_Project.InventoryDashboardViewModel

@{
    Layout = "~/Views/Shared/_LayoutNGO.cshtml";
}
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
<!-- jQuery (already included, keep your version 3.6.0) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- DataTables JS (must come AFTER jQuery) -->
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>

<style>
    /* ... Your CSS styles go here ... */
    .btn-primary {
        background: #111827;
        color: #fff;
        border: none;
        border-radius: 8px;
        padding: 10px 22px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: background-color 0.2s;
    }

        .btn-primary:hover {
            background: #1f2937;
        }

    /* Force Add Item button to always be visible */
    #showAddItemFormBtn {
        display: inline-flex !important;
        visibility: visible !important;
        opacity: 1 !important;
    }

    .summary-card {
        background: #fff;
        border-radius: 12px;
        padding: 22px 28px;
        border: 1.5px solid #e5e7eb;
        min-width: 220px;
    }

    .form-section {
        background: #fff;
        border-radius: 10px;
        border: 1.5px solid #e5e7eb;
        padding: 24px;
        margin-bottom: 28px;
    }

    /* Styles for form alignment */
    .form-fields-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
        gap: 18px;
        margin-bottom: 20px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

        .form-group label {
            font-weight: 500;
            margin-bottom: 6px;
            color: #4b5563;
        }

    .form-control {
        padding: 10px;
        border: 1.5px solid #d1d5db;
        border-radius: 6px;
        font-size: 1rem;
        transition: border-color 0.2s;
    }

        .form-control:focus {
            outline: none;
            border-color: #3b82f6;
        }

    .text-danger {
        font-size: 0.875rem;
        color: #ef4444;
        margin-top: 4px;
    }

    /* Updated button styles */
    .btn {
        padding: 10px 22px;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.2s, color 0.2s;
    }

    .btn-success {
        background: #22c55e;
        color: #fff;
        border: none;
    }

        .btn-success:hover {
            background: #16a34a;
        }

    .btn-cancel {
        background: #e5e7eb;
        color: #374151;
        border: none;
    }

        .btn-cancel:hover {
            background: #d1d5db;
        }

    .d-grid {
        display: flex;
        gap: 12px;
        margin-top: 20px;
    }

    /* Table styles */
    .table-container {
        overflow-x: auto;
    }

    .inventory-table {
        width: 100%;
        border-collapse: collapse;
        min-width: 600px;
    }

        .inventory-table th,
        .inventory-table td {
            padding: 12px 16px;
            text-align: left;
            border-bottom: 1.5px solid #e5e7eb;
        }

    .status.available {
        color: green;
    }

    .status.low-stock {
        color: orange;
    }

    .status.out-of-stock {
        color: red;
    }
    /* Modal Background */
    .modal-bg {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: none; /* hidden by default */
        justify-content: center;
        align-items: center;
        z-index: 1050;
    }

    /* Modal Content */
    .modal-content {
        background: #fff;
        padding: 24px;
        border-radius: 12px;
        width: 100%;
        max-width: 480px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        animation: fadeInScale 0.3s ease-in-out;
    }

    /* Smooth open animation */
    @@keyframes fadeInScale {
        from {
            opacity: 0;
            transform: scale(0.9);
        }

        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    /* Pagination */
    .pagination-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 12px;
        margin-top: 16px;
        flex-wrap: wrap;
    }

    /* Pager buttons */
    .pager {
        display: flex;
        gap: 8px;
        align-items: center;
        flex-wrap: wrap;
    }

    .page-link {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        min-width: 36px;
        height: 36px;
        padding: 0 12px;
        border: 1.5px solid #e5e7eb;
        border-radius: 999px; /* pill */
        background: #fff;
        color: #111827;
        text-decoration: none;
        font-weight: 600;
        line-height: 1;
        transition: background .15s, color .15s, border-color .15s;
    }

        .page-link:hover {
            background: #111827;
            color: #fff;
            border-color: #111827;
        }

        .page-link.active {
            background: #111827;
            color: #fff;
            border-color: #111827;
            pointer-events: none;
        }

        .page-link.disabled {
            opacity: .45;
            pointer-events: none;
        }

    /* Page-size block */
    .page-size {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        font-size: .95rem;
        color: #374151;
    }

        .page-size select {
            height: 36px;
            border: 1.5px solid #e5e7eb;
            border-radius: 8px;
            padding: 0 10px;
            background: #fff;
            font-weight: 600;
        }
</style>

<div class="tab-content">
    <div style="display: flex; justify-content: flex-end; margin-bottom: 18px;">
        <div class="row" style="display: flex; gap: 10px; align-items: center;">
            <button id="showAddItemFormBtn" class="btn-primary" style="padding: 10px 22px; font-size: 1rem; font-weight: 600;">
                <span style="font-size:1.1rem;"></span> Add Item
            </button>
            <button id="openFeedModalBtn" class="btn-primary" style="background: #111827; color: #fff; border: none; border-radius: 8px; padding: 10px 22px; font-size: 1rem; font-weight: 600; cursor: pointer; display: flex; align-items: center; gap: 8px;">
                Add New Category
            </button>
        </div>
    </div>

    <div style="font-size: 2rem; font-weight: 700; margin-bottom: 18px; color: #111827;">Inventory Management</div>

    <div style="display: flex; gap: 18px; margin-bottom: 24px; flex-wrap: wrap;">
        <div class="summary-card">
            <div style="color: #374151; font-weight: 600;">Total Items</div>
            <div id="totalItems" style="font-size: 2rem; font-weight: 700; color: #1d4ed8;">@Model.InventoryItems.Count()</div>
        </div>
        <div class="summary-card">
            <div style="color: #374151; font-weight: 600;">Available</div>
            <div id="availableItems" style="font-size: 2rem; font-weight: 700; color: #1d4ed8;">@Model.InventoryItems.Count(i => i.Quantity > 5)</div>
        </div>
        <div class="summary-card">
            <div style="color: #374151; font-weight: 600;">Low Stock </div>
            <div id="lowStockItems" style="font-size: 2rem; font-weight: 700; color: #1d4ed8;">@Model.InventoryItems.Count(i => i.Quantity <= 5 && i.Quantity > 0)</div>
        </div>
    </div>

    <div id="addItemFormContainer" class="form-section" style="display: none;">
        <div style="font-size: 1.25rem; font-weight: 700;">Add New Inventory Item</div>
        <div style="color: #6b7280; font-size: 1.05rem; margin-bottom: 18px;">Record new donations received</div>

        <form id="addItemForm">
            @Html.AntiForgeryToken()
            <div class="form-fields-grid">
                <div class="form-group">
                    <label>Item Name</label>
                    @Html.TextBoxFor(m => m.NewItem.ItemName, new { @class = "form-control alphabetsonly", placeholder = "Enter item name", required = "required" })
                    @Html.ValidationMessageFor(m => m.NewItem.ItemName, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    <label for="categoryid">Category</label>
                    @Html.DropDownListFor(m => m.NewItem.CategoryId, (SelectList)ViewBag.Categories,
                                           "-- Select Category --",
                                           new { @id = "categoryid", @class = "form-control searchable" })
                    @Html.ValidationMessageFor(m => m.NewItem.CategoryId, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    <label for="Unit">Unit</label>
                    @Html.TextBoxFor(m => m.NewItem.Unit, new { @class = "form-control", @id = "Unit", @readonly = "readonly" })
                </div>

                <div class="form-group">
                    <label>Quantity</label>
                    @Html.TextBoxFor(m => m.NewItem.Quantity, new { @class = "form-control numbersOnly", placeholder = "e.g., 50", type = "number", required = "required", min = "1" })
                    @Html.ValidationMessageFor(m => m.NewItem.Quantity, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    <label>Expiry Date (if applicable)</label>
                    @Html.TextBoxFor(m => m.NewItem.ExpirationDate, "{0:yyyy-MM-dd}", new { @type = "date", @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.NewItem.ExpirationDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="d-grid">
                <button type="submit" class="btn btn-success">Add Item</button>
                <button type="button" id="cancelAddItemFormBtn" class="btn btn-cancel">Cancel</button>
            </div>
        </form>
    </div>

    <div style="background: #fff; border-radius: 10px; border: 1.5px solid #e5e7eb; padding: 24px;">
        <div style="font-size: 1.25rem; font-weight: 700;">Current Inventory</div>
        <div style="color: #6b7280; font-size: 1.05rem; margin-bottom: 18px;">Track and manage your donation inventory</div>

        <div class="table-container">
            <table class="inventory-table">
                <thead>
                    <tr>
                        <th>Item Name</th>
                        <th>Category</th>
                        <th>Quantity</th>
                        <th>Unit</th>
                        <th>Status</th>
                        <th>Received Date</th>
                    </tr>
                </thead>
                <tbody id="inventoryTableBody">
                    @Html.Partial("_InventoryTableRows", Model.InventoryItems)
                </tbody>
            </table>

        </div>
    </div>


    <div class="modal-bg" id="feedModalBg">
        <div class="modal-content">
            <h2>Manage Categories & Units</h2>

            <!-- Add New Category Form -->
            @using (Html.BeginForm("CreateCategory", "InventoryItems", FormMethod.Post, new { id = "createCategoryForm" }))
            {
                @Html.AntiForgeryToken()
                <div class="modal-form-row">
                    <div class="modal-form-group">
                        <label for="CategoryName">Category</label>
                        @Html.TextBox("CategoryName", null, new { @class = "form-control alphabetsonly", @id = "CategoryName", @placeholder = "Enter Category..." })
                        <span class="text-danger" id="errorMessage"></span>
                    </div>
                    <div class="modal-form-group">
                        <label for="Unit">Unit</label>
                        @Html.DropDownList("Unit", new SelectList(new[]
                        {
                            new { Value = "ctn", Text = "Carton" },
                            new { Value = "pcs", Text = "Pieces" },
                            new { Value = "kg", Text = "KG" },
                            new { Value = "ltr", Text = "Litre" },
                            new { Value = "m", Text = "Meter" },
                        }, "Value", "Text"), "-- Select Unit --", new { @class = "form-control searchable", @id = "Unit" })
                    </div>
                </div>

                <div class="modal-form-actions">
                    <button type="submit" class="btn btn-success">Add Category</button>
                    <button type="button" class="btn btn-cancel" id="cancelFeedModalBtn">Close</button>
                </div>
            }

            <div style="margin-top: 30px; background: #fff; border: 1.5px solid #e5e7eb; padding: 20px; border-radius: 10px;">
                <h2 style="font-size: 1.25rem; font-weight: 700; margin-bottom: 15px;">Manage Categories & Units</h2>
                <table class="inventory-table">
                    <thead>
                        <tr>
                            <th>Category</th>
                            <th>Unit</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    @if (ViewBag.CategoriesList != null)
                    {
                        <tbody id="categoriesTableBody">
                            @foreach (var cat in ViewBag.CategoriesList as List<NGO_Project.Category>)
                            {
                                <tr data-id="@cat.CategoryId">
                                    <td class="cat-name">@cat.CategoryName</td>
                                    <td class="cat-unit">@cat.Unit</td>
                                    <td>
                                        <button class="btn btn-success btn-sm editCategoryBtn">Edit</button>
                                        <button class="btn btn-cancel btn-sm deleteCategoryBtn">Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    }
                </table>
            </div>
            <div class="modal-bg" id="editCategoryModal" style="display:none;">
                <div class="modal-content">
                    <h2>Edit Category</h2>
                    <form id="editCategoryForm">
                        <input type="hidden" id="editCategoryId" name="id" />
                        <div class="form-group">
                            <label>Category Name</label>
                            <input type="text" id="editCategoryName" name="categoryName" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label>Unit</label>
                            <input type="text" id="editCategoryUnit" name="unit" class="form-control" required />
                        </div>
                        <div class="modal-form-actions">
                            <button type="submit" class="btn btn-success">Save</button>
                            <button type="button" class="btn btn-cancel" id="cancelEditCategoryBtn">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-bg" id="donorModalBg" style="display:none;">
        <div class="modal-content">
            <h2>Donor Information</h2>
            <form id="donorForm">
                <input type="hidden" id="DonorId" name="DonorId" value="0" />
                <input type="hidden" id="NGOId" name="NGOId" value="@Session["UserId"]" />
                <!-- ✅ Added -->
                <input type="hidden" id="DonatedItemId" name="DonatedItemId" />
                <input type="hidden" id="DonatedCategory" name="DonatedCategory" />

                <div class="form-group">
                    <label for="FullName">Full Name</label>
                    <input type="text" id="FullName" name="FullName" class="form-control" required />
                </div>
                <div class="form-group">
                    <label for="Email">Email</label>
                    <input type="email" id="Email" name="Email" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="PhoneNumber">Phone Number</label>
                    <input type="text" id="PhoneNumber" name="PhoneNumber" class="form-control" required />
                </div>
                <div class="form-group">
                    <label for="DonatedItem">Donated Item</label>
                    <input type="text" id="DonatedItem" name="DonatedItem" class="form-control" readonly />
                </div>

                <div class="modal-form-actions">
                    <button type="submit" class="btn btn-success">Save & Print Invoice</button>
                    <button type="button" class="btn btn-cancel" id="cancelDonorModalBtn">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

    <script>
        var inventoryTable;

        $(document).ready(function () {
            // ✅ Initialize DataTable once
            inventoryTable = $(".inventory-table").DataTable({
                pageLength: 10,
                lengthMenu: [10, 20, 50],
                searching: true,
                ordering: true,
                responsive: true
            });

            // --- Add Item Form toggle ---
            $("#showAddItemFormBtn").on("click", function () {
                $("#addItemFormContainer").show();
            });

            $("#cancelAddItemFormBtn").on("click", function () {
                $("#addItemFormContainer").hide();
                $("#addItemForm")[0].reset();
            });

            // --- Add Item Submit ---
            $("#addItemForm").submit(function (e) {
                e.preventDefault();

                var form = $(this);

                $.ajax({
                    url: "/InventoryItems/Create",
                    type: "POST",
                    data: form.serialize(),
                    success: function (response) {
                        if (response.success) {
                            $("#addItemFormContainer").hide();
                            form[0].reset();

                            // Step 1: Success message
                            swal("Item Added Successfully!", "", "success").then(() => {
                                // Step 2: Ask for next action
                                swal({
                                    title: "Next Step",
                                    text: "Would you like to print invoice or mark as anonymous donation?",
                                    icon: "info",
                                    buttons: {
                                        cancel: {
                                            text: "Cancel",
                                            value: "cancel",
                                            visible: false // hide cancel to force a choice
                                        },
                                        anonymous: {
                                            text: "Anonymous Donation",
                                            value: "anonymous",
                                            className: "btn-warning"
                                        },
                                        invoice: {
                                            text: "Print Invoice",
                                            value: "invoice",
                                            className: "btn-success"
                                        }
                                    }
                                }).then((value) => {
                                    if (value === "invoice") {
                                        // ✅ Also open donor modal
                                        $("#DonatedItemId").val(response.itemId);
                                        $("#DonatedCategory").val(response.categoryName);
                                        $("#DonatedItem").val(response.categoryName);
                                        $("#donorModalBg").show();
                                    } else if (value === "anonymous") {
                                        // ✅ Just close the popup (nothing else)
                                        swal("Marked as Anonymous Donation", "", "info");
                                    }
                                });
                            });

                            // Refresh inventory table
                            $.get("/InventoryItems/GetInventoryItems", function (data) {
                                $("#inventoryTableBody").html(data);

                                if ($.fn.DataTable.isDataTable(".inventory-table")) {
                                    inventoryTable.destroy();
                                }
                                inventoryTable = $(".inventory-table").DataTable({
                                    pageLength: 10,
                                    lengthMenu: [10, 20, 50],
                                    searching: true,
                                    ordering: true,
                                    responsive: true
                                });
                            });

                            // Refresh summary
                            $.get("/InventoryItems/GetSummaryData", function (data) {
                                $("#totalItems").text(data.total);
                                $("#availableItems").text(data.available);
                                $("#lowStockItems").text(data.lowStock);
                            });

                        } else {
                            swal("Error!", response.errors || "An error occurred.", "error");
                        }
                    },
                    error: function () {
                        swal("Error!", "Something went wrong.", "error");
                    }
                });
            });

            // --- Category Modal Form ---
            $("#createCategoryForm").submit(function (e) {
                e.preventDefault();

                $.ajax({
                    url: $(this).attr("action"),
                    type: "POST",
                    data: $(this).serialize(),
                    success: function (response) {
                        if (response.success) {
                            swal("Success!", response.message, "success");
                            $("#CategoryName").val("");
                            $("#Unit").val("");
                            $("#feedModalBg").hide();
                        } else {
                            $("#errorMessage").text(response.message);
                        }
                    },
                    error: function () {
                        $("#errorMessage").text("Something went wrong. Please try again.");
                    }
                });
            });

            $("#cancelFeedModalBtn").click(function () {
                $("#feedModalBg").hide();
            });
            $("#openFeedModalBtn").click(function () {
                $("#feedModalBg").show();
            });

            // --- Donor Form ---
            $("#donorForm").submit(function (e) {
                e.preventDefault();

                $.ajax({
                    url: "/Donors/SaveDonor",
                    type: "POST",
                    data: $(this).serialize(),
                    success: function (res) {
                        if (res.success) {
                            $("#donorModalBg").hide();
                            window.location.href = "/Donors/Index";
                        } else {
                            swal("Error!", res.message || "Unable to save donor info.", "error");
                        }
                    },
                    error: function () {
                        swal("Error!", "Something went wrong.", "error");
                    }
                });
            });

            // --- Auto-fill Unit from Category ---
            $("#categoryid").change(function () {
                var categoryId = $(this).val();
                if (categoryId) {
                    $.ajax({
                        url: '@Url.Action("GetUnitByCategory", "InventoryItems")',
                        type: "GET",
                        data: { categoryId: categoryId },
                        success: function (data) {
                            if (data) {
                                $("#Unit").val(data.UnitName);
                            } else {
                                $("#Unit").val("");
                            }
                        },
                        error: function () {
                            alert("Error loading unit for category.");
                        }
                    });
                } else {
                    $("#Unit").val("");
                }
            });

            // --- Edit Category ---
            $(document).on("click", ".editCategoryBtn", function () {
                var row = $(this).closest("tr");
                var id = row.data("id");
                var name = row.find(".cat-name").text();
                var unit = row.find(".cat-unit").text();

                $("#editCategoryId").val(id);
                $("#editCategoryName").val(name);
                $("#editCategoryUnit").val(unit);

                $("#editCategoryModal").show();
            });

            $("#cancelEditCategoryBtn").click(function () {
                $("#editCategoryModal").hide();
            });

            $("#editCategoryForm").submit(function (e) {
                e.preventDefault();

                $.ajax({
                    url: "/InventoryItems/EditCategory",
                    type: "POST",
                    data: $(this).serialize(),
                    success: function (res) {
                        if (res.success) {
                            swal("Success!", "Category updated successfully!", "success")
                                .then(() => location.reload());
                        } else {
                            swal("Error!", res.message, "error");
                        }
                    }
                });
            });


            // --- Edit Category ---
            $(document).on("click", ".editCategoryBtn", function () {
                var row = $(this).closest("tr");
                var id = row.data("id");
                var name = row.find(".cat-name").text();
                var unit = row.find(".cat-unit").text();

                $("#editCategoryId").val(id);
                $("#editCategoryName").val(name);
                $("#editCategoryUnit").val(unit);

                $("#editCategoryModal").show();
            });

            $("#cancelEditCategoryBtn").click(function () {
                $("#editCategoryModal").hide();
            });

            $("#editCategoryForm").submit(function (e) {
                e.preventDefault();

                $.ajax({
                    url: "/InventoryItems/EditCategory",
                    type: "POST",
                    data: $(this).serialize(),
                    success: function (res) {
                        if (res.success) {
                            swal("Success!", "Category updated successfully!", "success")
                                .then(() => location.reload());
                        } else {
                            swal("Error!", res.message, "error");
                        }
                    }
                });
            });

            // --- Delete Category ---
            $(document).on("click", ".deleteCategoryBtn", function () {
                var row = $(this).closest("tr");
                var id = row.data("id");

                swal({
                    title: "Are you sure?",
                    text: "This will permanently delete the category.",
                    icon: "warning",
                    buttons: true,
                    dangerMode: true,
                }).then((willDelete) => {
                    if (willDelete) {
                        $.ajax({
                            url: "/InventoryItems/DeleteCategory",
                            type: "POST",
                            data: { id: id },
                            success: function (res) {
                                if (res.success) {
                                    swal("Deleted!", "Category has been deleted.", "success")
                                        .then(() => row.remove());
                                } else {
                                    swal("Error!", res.message, "error");
                                }
                            }
                        });
                    }
                });
            });



        });
    </script>


}
